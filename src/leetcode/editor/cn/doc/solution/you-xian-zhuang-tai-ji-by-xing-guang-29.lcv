## 有限状态机解法

## 解题思路：

1. 维护一个3个元素的state数组表示3个状态
   state[0] 表示 mod 为 0 的 最大和
   state[1] 表示 mod 为 1 的 最大和
   state[2] 表示 mod 为 2 的 最大和

2. 遍历nums数组的每个元素num,会不断改变状态机的状态
   (1) 当num%3为0时，state各个元素加上num后，nums%3后的值不变

   (2) 当num%3为1时，

* state[2] + num后是一个能被3整除的数，此时只需比较和state[0]哪个大，把值大的赋予state[0]即可,即state[0] = Max(state[2] + num,  state[0])
* state[0] + num后是一个mod 3为1的数，此时state[1] = Max(state[0] + num, state[1])
* state[1] + num后是一个mod 3为2的数，此时state[2] = Max(state[1] + num, state[2])

  (3) 当num%3为2时，

* state[1] + num后是一个能被3整除的数，此时state[0] = Max(state[1] + num, state[0])
* state[2] + num后是一个mod 3为1的数，此时state[1] = Max(state[2] + num, state[1])
* state[0] + num后是一个mod 3为2的数，此时state[2] = Max(state[0] + num, state[2])

3. 最后state[0]即为所求的值

## 代码如下：

* javascript

```javascript
/**
 * 时间复杂度O(n)
 * 空间复杂度O(n)
 */
var maxSumDivThree1 = function(nums) {
    let state = [0, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER];

    for (let num of nums) {
        if (num % 3 === 0) {
            state = [state[0] + num, state[1] + num, state[2] + num ]
        } else if (num % 3 === 1) {
            const a = Math.max(state[2] + num, state[0]);
            const b = Math.max(state[0] + num, state[1]);
            const c = Math.max(state[1] + num, state[2]);
            state = [a, b, c];
        } else if (num % 3 === 2) {
            const a = Math.max(state[1] + num, state[0]);
            const b = Math.max(state[2] + num, state[1]);
            const c = Math.max(state[0] + num, state[2]);
            state = [a, b, c];
        }
    }
    return state[0];
};

```

> 更多题解可参考
> https://github.com/sinkhaha/dataStructureAndAlgorithm/tree/master/algorithmSolution

