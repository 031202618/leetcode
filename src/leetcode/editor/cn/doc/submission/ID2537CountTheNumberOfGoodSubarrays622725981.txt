    class Solution {
        public long countGood(int[] nums, int k) {
            long ret = 0;
            int l = 0, r = 0;
            int curK = 0;
            Map<Integer, Integer> map = new HashMap<>();
            while (l < nums.length) {
                while (curK < k && r < nums.length) {
                    Integer orDefault = map.getOrDefault(nums[r], 0);
                    curK += orDefault;
                    map.put(nums[r], orDefault + 1);
                    r++;
                }
                if (curK == k) {
                    ret += (nums.length - r + 1);
                }
                int x = map.get(nums[l]) - 1;
                curK -= x;
                map.put(nums[l], x);
                l++;
            }
            return ret;
        }
    }

//total_testcases:41
//total_correct:14
//input_formatted:[2,1,3,1,2,2,3,3,2,2,1,1,1,3,1]
11
//expected_output:21
//code_output:0
//last_testcase:[2,1,3,1,2,2,3,3,2,2,1,1,1,3,1]
11
