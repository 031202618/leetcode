class Solution {
    public long maxStrength(int[] nums) {
                if(nums.length == 1){
            return nums[0];
        }
        long[][] dp = new long[nums.length + 1][2];
        for (int i = 0; i < nums.length; i++) {
            dp[i + 1][0] = Math.min(dp[i + 1][0], dp[i][0]);
            dp[i + 1][0] = Math.min(dp[i + 1][0], dp[i][0] * nums[i]);
            dp[i + 1][0] = Math.min(dp[i + 1][0], nums[i]);
            dp[i + 1][0] = Math.min(dp[i + 1][0], dp[i][1] * nums[i]);
            dp[i + 1][1] = Math.max(dp[i + 1][1], dp[i][1]);
            dp[i + 1][1] = Math.max(dp[i + 1][1], dp[i][1] * nums[i]);
            dp[i + 1][1] = Math.max(dp[i + 1][1], nums[i]);
            dp[i + 1][1] = Math.max(dp[i + 1][1], dp[i][0] * nums[i]);
        }
        return dp[nums.length][1];
    }
}
//runtime:3 ms
//memory:43 MB
